---
title: "Hands-on Exercise 6"
subtitle: "Lesson 6: [Visualising and Analysing Time-oriented Data](https://r4va.netlify.app/chap17)" 
author: "Victoria Neo"
date: 02/19/2024
date-modified: last-modified
format:
  html:
    code-fold: true
    code-summary: "code block"
    code-tools: true
    code-copy: true
execute:
  warning: false
---

![*Taken from* [Mastering Data Visualization: Unleashing the Power of Data Storytelling with Time Series Plots in Python](https://medium.com/@stephanhausberg/mastering-data-visualization-unleashing-the-power-of-data-storytelling-with-time-series-plots-in-aaefdcf2f1a1)](images/clipboard-1868755722.png){fig-align="left"}

# Overview Summary

|                  |                                                                                                                                                                      |
|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Work done        | Hands-on Exercise 6                                                                                                                                                  |
| Hours taken      | ‚è±Ô∏è‚è±Ô∏è‚è±Ô∏è ( hospitalisation leave)                                                                                                                                      |
| Questions        | 0                                                                                                                                                                    |
| How do I feel?   | ü´•                                                                                                                                                                   |
| What do I think? | It was helpful to go through this guide and I did use some idea for the Take-home_Ex03. I think I need more experience preparing data for such data visualisations.  |

# 1 Overview

-   plotting a calender heatmap by using ggplot2 functions,

-   plotting a cycle plot by using ggplot2 function,

-   plotting a slopegraph

-   plotting a horizon chart

## 1.1 Installing and loading the required libraries

The code chunk below uses p_load() of pacman package to check if the following R packages are installed in the computer. If they are, then they will be launched into R.

-   scales,

-   viridis,

-   lubridate,

-   ggthemes,

-   gridExtra,

-   readxl,

-   knitr,

-   data.table and

-   tidyverse

```{r}
pacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)
```

# 2 **Plotting Calendar Heatmap**

-   plot a calender heatmap by using ggplot2 functions and extension,

-   to write function using R programming,

-   to derive specific date and time related field by using base R and lubridate packages

-   to perform data preparation task by using tidyr and dplyr packages.

## 2.1 Data

For the purpose of this hands-on exercise,¬†*eventlog.csv*¬†file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.

### 2.1.1 **Importing Data**

To import¬†*eventlog.csv*¬†into R,¬†***read_csv()***¬†function of¬†**readr**¬†package will be used.

```{r}
attacks <- read_csv("data/eventlog.csv")
```

### 2.1.2 **Examining the data structure**

*kable()*¬†can be used to review the structure of the imported data frame.

```{r}
kable(head(attacks))
```

There are three columns, namely *timestamp*, *source_country* and *tz*.

-   *timestamp* field stores date-time values in POSIXct format.

-   *source_country* field stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.

-   *tz* field stores time zone of the source IP address.

### 2.1.3 **Data Preparation**

Step 1: Deriving¬†*weekday*¬†and¬†*hour of day*¬†fields: ¬†two new fields namely¬†*wkday*¬†and¬†*hour*¬†need to be derived. In this step, we will write a function to perform the task.

```{r}
make_hr_wkday <- function(ts, sc, tz) {
  real_times <- ymd_hms(ts, 
                        tz = tz[1], 
                        quiet = TRUE)
  dt <- data.table(source_country = sc,
                   wkday = weekdays(real_times),
                   hour = hour(real_times))
  return(dt)
  }
```

::: callout-note
-   [`ymd_hms()`](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [`hour()`](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package, and

-   [`weekdays()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a **base** R function.
:::

Step 2: Deriving the attacks tibble data frame

```{r}
wkday_levels <- c('Saturday', 'Friday', 
                  'Thursday', 'Wednesday', 
                  'Tuesday', 'Monday', 
                  'Sunday')

attacks <- attacks %>%
  group_by(tz) %>%
  do(make_hr_wkday(.$timestamp, 
                   .$source_country, 
                   .$tz)) %>% 
  ungroup() %>% 
  mutate(wkday = factor(
    wkday, levels = wkday_levels),
    hour  = factor(
      hour, levels = 0:23))
```

::: callout-note
Beside extracting the necessary data into¬†*attacks*¬†data frame,¬†`mutate()`¬†of¬†**dplyr**¬†package is used to convert¬†*wkday*¬†and¬†*hour*¬†fields into¬†**factor**¬†so they‚Äôll be ordered when plotting
:::

```{r}
kable(head(attacks))
```

## 2.2 **Building the Calendar Heatmaps**

```{r}
grouped <- attacks %>% 
  count(wkday, hour) %>% 
  ungroup() %>%
  na.omit()

ggplot(grouped, 
       aes(hour, 
           wkday, 
           fill = n)) + 
geom_tile(color = "white", 
          size = 0.1) + 
theme_tufte(base_family = "Helvetica") + 
coord_equal() +
scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
labs(x = NULL, 
     y = NULL, 
     title = "Attacks by weekday and time of day") +
theme(axis.ticks = element_blank(),
      plot.title = element_text(hjust = 0.5),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 6) )
```

::: {.kambox .kam data-latex="kam"}
#### What did Prof Kam say?

**Note**

-   a tibble data table called *grouped* is derived by aggregating the attack by *wkday* and *hour* fields.

-   a new field called *n* is derived by using `group_by()` and `count()` functions.

-   `na.omit()` is used to exclude missing value.

-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size` arguments are used to specify the border color and line size of the tiles.

-   [`theme_tufte()`](https://jrnold.github.io/ggthemes/reference/theme_tufte.html) of [**ggthemes**](https://jrnold.github.io/ggthemes/reference/) package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.

-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.

-   `scale_fill_gradient()` function is used to creates a two colour gradient (low-high).
:::

Then we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there‚Äôs no need to further preprocess the data.

## 2.3 **Building Multiple Calendar Heatmaps**

**Challenge:**¬†Building multiple heatmaps for the top four countries with the highest number of attacks.

**My own attempt:**

Step 1: Filter data for the top four countries with highest number of attacks

```{r}

top_countries <- attacks %>%
  group_by(source_country) %>%
  summarize(total_attacks = n()) %>%
  arrange(desc(total_attacks)) %>%
  slice(1:4) %>%
  pull(source_country)

filtered_data <- attacks %>%
  filter(source_country %in% top_countries)  %>%
  mutate(source_country = factor(source_country, levels = top_countries))

```

Step 2: Create multiple heatmaps with facets

```{r}
grouped <- filtered_data %>% 
  count(source_country, wkday, hour) %>% 
  ungroup() %>%
  na.omit()

ggplot(grouped, 
       aes(hour, 
           wkday, 
           fill = n)) + 
  geom_tile(color = "white", 
            size = 0.1) + 
  theme_tufte(base_family = "Helvetica") + 
  scale_fill_gradient(name = "# of attacks",
                      low = "sky blue", 
                      high = "dark blue") +
  labs(x = NULL, 
       y = NULL, 
       title = "Attacks by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6) ) +
  facet_wrap(~source_country, scales = "free", ncol = 2)
```

## 2.4 **Prof Kam's solution**

Step 1: Deriving attack by country object

In order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:

-   count the number of attacks by country,

-   calculate the percent of attackes by country, and

-   save the results in a tibble data frame.

```{r}
attacks_by_country <- count(
  attacks, source_country) %>%
  mutate(percent = percent(n/sum(n))) %>%
  arrange(desc(n))
```

Step 2: Preparing the tidy data frame

In this step, you are required to extract the attack records of the top 4 countries from *attacks* data frame and save the data in a new tibble data frame (i.e.¬†*top4_attacks*).

```{r}
top4 <- attacks_by_country$source_country[1:4]
top4_attacks <- attacks %>%
  filter(source_country %in% top4) %>%
  count(source_country, wkday, hour) %>%
  ungroup() %>%
  mutate(source_country = factor(
    source_country, levels = top4)) %>%
  na.omit()
```

Step 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.

```{r}
ggplot(top4_attacks, 
       aes(hour, 
           wkday, 
           fill = n)) + 
  geom_tile(color = "white", 
          size = 0.1) + 
  theme_tufte(base_family = "Helvetica") + 
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
  facet_wrap(~source_country, ncol = 2) +
  labs(x = NULL, y = NULL, 
     title = "Attacks on top 4 countries by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        axis.text.x = element_text(size = 7),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6) )
```

# 3 **Plotting Cycle Plot**

In this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.

### 3.1 Step 1: **Importing Data**

For the purpose of this hands-on exercise, *arrivals_by_air.xlsx* will be used.

The code chunk below imports *arrivals_by_air.xlsx* by using `read_excel()` of **readxl** package and save it as a tibble data frame called *air*.

```{r}
air <- read_excel("data/arrivals_by_air.xlsx")
```

### 3.2 **Step 2: Deriving month and year fields**

Next, two new fields called¬†*month*¬†and¬†*year*¬†are derived from¬†*Month-Year*¬†field.

```{r}
air$month <- factor(month(air$`Month-Year`), 
                    levels=1:12, 
                    labels=month.abb, 
                    ordered=TRUE) 
air$year <- year(ymd(air$`Month-Year`))
```

### 3.3 **Step 3: Extracting the target country**

Next, the code chunk below is use to extract data for the target country (i.e.¬†Vietnam)

```{r}
Vietnam <- air %>% 
  select(`Vietnam`, 
         month, 
         year) %>%
  filter(year >= 2010)
```

### 3.4 **Step 4: Computing year average arrivals by month**

The code chunk below uses¬†`group_by()`¬†and¬†`summarise()`¬†of¬†**dplyr**¬†to compute year average arrivals by month.

```{r}
hline.data <- Vietnam %>% 
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))
```

### 3.4 **Step 5: Plotting the cycle plot**

The code chunk below is used to plot the cycle plot.

```{r}
ggplot() + 
  geom_line(data=Vietnam,
            aes(x=year, 
                y=`Vietnam`, 
                group=month), 
            colour="black") +
  geom_hline(aes(yintercept=avgvalue), 
             data=hline.data, 
             linetype=6, 
             colour="red", 
             size=0.5) + 
  facet_grid(~month) +
  labs(axis.text.x = element_blank(),
       title = "Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019") +
  xlab("") +
  ylab("No. of Visitors") +
  theme_tufte(base_family = "Helvetica") +
  theme_gray()
```

# 4 **Plotting Slopegraph**

Before getting start, make sure that¬†**CGPfunctions**¬†has been installed and loaded onto R environment. Then, refer to¬†[Using newggslopegraph](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html)¬†to learn more about the function. Lastly, read more about¬†`newggslopegraph()`¬†and its arguments by referring to this¬†[link](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/newggslopegraph).

### 3.1 Step 1: **Importing Data**

Import the rice data set into R environment by using the code chunk below.

```{r}
rice <- read_csv("data/rice.csv")
```

### 3.2 **Step 2: Plotting the slopegraph**

Next, code chunk below will be used to plot a basic slopegraph as shown below.

```{r}
rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                Title = "Rice Yield of Top 11 Asian Counties",
                SubTitle = "1961-1980",
                Caption = "Prepared by: Victoria Neo \nCode from: Dr. Kam Tin Seong")
```

::: {.kambox .kam data-latex="kam"}
#### What did Prof Kam say?

**Thing to learn from the code chunk above** For effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor.
:::
