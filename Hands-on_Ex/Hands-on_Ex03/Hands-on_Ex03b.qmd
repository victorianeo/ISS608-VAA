---
title: "Hands-on Exercise 3b"
subtitle: "Lesson 3: [Programming Animated Statistical Graphics with R](https://r4va.netlify.app/chap04)" 
author: "Victoria Neo"
date: 01/24/2024
date-modified: 01/25/2024
format:
  html:
    code-fold: true
    code-summary: "code block"
    code-tools: true
    code-copy: true
    code-warning: false
---

[![Taken from \[How to Create Animated Charts and Graphs in Visme\]((https://visme.co/blog/create-animated-charts/))](images/animatedchart.gif)](https://visme.co/blog/create-animated-charts/)

# Overview Summary

|                  |                                                                                                     |
|--------------------------|----------------------------------------------|
| Work done        | Hands-on Exercise 3b                                                                                |
| Hours taken      | ‚è±Ô∏è‚è±Ô∏è (sick fil)                                                                                     |
| Questions        | 0                                                                                                   |
| How do I feel?   | üööüòµ                                                                                                |
| What do I think? | Animated plots are so cool when done right. I would like to learn more about how not to over do it. |

# 1 Overview Notes

When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics.

::: panel-tabset
## 1.1 Basic concepts of animation

When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.

![](images/clipboard-2255747727.png){width="402"}

## 1.2 Terminology

Before we dive into the steps for creating an animated statistical graph, it‚Äôs important to understand some of the key concepts and terminology related to this type of visualization.

1.  Frame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.

2.  Animation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.

::: {.thinkbox .think data-latex="think"}
Before you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.
:::
:::

# 2 Getting Started

## 2: Data

### 2.1 Installing and loading the required libraries

::: {.codebox .code data-latex="code"}
The code chunk below uses p_load() of pacman package to check if the following R packages are installed in the computer. If they are, then they will be launched into R.

-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.

-   [**gganimate**](https://gganimate.com/), an ggplot extension for creating animated statistical graphs.

-   [**gifski**](https://cran.r-project.org/web/packages/gifski/) converts video frames to GIF animations using pngquant‚Äôs fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.

-   [**gapminder**](https://cran.r-project.org/web/packages/gapminder/): An excerpt of the data available at Gapminder.org. We just want to use its *country_colors* scheme.

-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.
:::

```{r}
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse,
               kableExtra) 
```

### 1.2 Data Set

The data set, *GlobalPopulation.csv,* contains the global population demographic numbers across years (including forecast), number of young people, number of old people, total population size and continent; and is uploaded as **globalPop**.

#### 1.2.1 Importing globalPop

::: {.codebox .code data-latex="code"}
In the code chunk below,

-   [`read_xls()`](https://readxl.tidyverse.org/reference/read_excel.html) of **readxl** package is used to import the Excel worksheet.

-   `mutate_at()` or [`across()`](https://dplyr.tidyverse.org/reference/across.html)¬†are used to replace `mutate_each_()` of dplyr package that is used to convert all character data type into factor.

    -   `mutate_each_()`¬†was deprecated in dplyr 0.7.0. and¬†`funs()`¬†was deprecated in dplyr 0.8.0

    -   col \<- c("Country", "Continent") globalPop \<- read_xls("chap03/data/GlobalPopulation.xls", sheet="Data") %\>% mutate_each\_(funs(factor(.)), col) %\>% mutate(Year = as.integer(Year))

-   `mutate` of dplyr package is used to convert data values of Year field into integer.
:::

Using `mutate_at()`

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_at(col, as.factor) %>%
  mutate(Year = as.integer(Year))
```

Using `across()`

```{r}
#| warning: false
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate(across(col, as.factor)) %>%
  mutate(Year = as.integer(Year))
```

#### 1.2.2 Summary Statistic of globalPop

::: panel-tabset
## Data Table

### Displaying the first 5 rows of exam_data using `head():`

```{r}
head(globalPop,5) %>%
  kbl() %>%
  kable_material()
```

## Data Structure

### Checking the structure of exam_data using `str():`

```{r}
str(globalPop)
```

::: callout-note
There are 6204 rows and 6 variables. The output reveals that the variables have been assigned their correct data types.
:::

## Data Health

### Checking for any symptoms of messy data:

#### 1. Checking for duplicates:

```{r}
globalPop[duplicated(globalPop),]
```

::: callout-note
There were no duplicated rows found in globalPop.
:::

#### 2. Checking missing values:

```{r}
sum(is.na(globalPop))
```

::: callout-note
There were no missing values found in globalPop.
:::

#### 3. Checking for String inconsistencies:

3.1 In Country

```{r}
unique(globalPop$Country)
```

3.2 In Continent

```{r}
unique(globalPop$Continent)
```

::: callout-note
There were no string inconsistencies found in exam_data.
:::

#### 4 Checking for Data Irregularities:

4.1 In Year

```{r}
summary(globalPop$Year)
```

4.2 In Young

```{r}
summary(globalPop$Young)
```

4.3 In Old

```{r}
summary(globalPop$Old)
```

4.4 In Population

```{r}
summary(globalPop$Population)
```

::: callout-note
There were no data irregularities found in globalPop.
:::
:::

# 3: Hands-on Exercise

## 3.1 Animated Data Visualisation: gganimate methods

::: {.kambox .kam data-latex="kam"}
#### What did Prof Kam say?

gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.

-   transition\_\*() defines how the data should be spread out and how it relates to itself across time.
-   view\_*() defines how the positional scales should change along the animation. shadow\_*() defines how data from other points in time should be presented in the given point in time.
-   enter\_*()/exit\_*() defines how new data should appear and how old data should disappear during the course of the animation.
-   ease_aes() defines how different aesthetics should be eased during transitions.
:::

### 3.1.1 Building a static population bubble plot

::: {.codebox .code data-latex="code"}
In the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.
:::

::: panel-tabset
## The plot

```{r}
#| echo: false 
#| warning: false
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young')  
```

## The code chunk

```{r}
#| warning: false 
#| code-fold: show
#| eval: false
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young')         
```
:::

### 3.1.2 Building the animated bubble plot

::: {.codebox .code data-latex="code"}
In the code chunk below,

-   transition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).
-   ease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.
:::

::: panel-tabset
## The plot

```{r}
#| echo: false 
#| warning: false
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('linear')        
```

## The code chunk

```{r}
#| warning: false 
#| code-fold: show
#| eval: false
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('linear')               
```
:::

## 3.2 Animated Data Visualisation: plotly

::: {.kambox .kam data-latex="kam"}
#### What did Prof Kam say?

In Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).
:::

### 3.2.1 **Building an animated bubble plot: `ggplotly()` method**

::: {.codebox .code data-latex="code"}
In this sub-section, you will learn how to create an animated bubble plot by using¬†`ggplotly()`¬†method.

**Things to learn from the code chunk below**

-   Appropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called *gg*.

-   `ggplotly()` is then used to convert the R graphic object into an animated svg object.
:::

::: panel-tabset
## The plot

```{r}
#| echo: false 
#| warning: false
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young')

ggplotly(gg) 
```

## The code chunk

```{r}
#| warning: false 
#| code-fold: show
#| eval: false
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young')

ggplotly(gg)     
```
:::

### 3.2.2 Removing the Legend

::: {.codebox .code data-latex="code"}
Notice in the previous plot that although¬†`show.legend = FALSE`¬†argument was used, the legend still appears on the plot. To overcome this problem,¬†`theme(legend.position='none')`¬†should be used as shown in the plot and code chunk below.
:::

::: panel-tabset
## The plot

```{r}
#| echo: false 
#| warning: false
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') + 
  theme(legend.position='none')

ggplotly(gg)     
```

## The code chunk

```{r}
#| warning: false 
#| code-fold: show
#| eval: false
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') + 
  theme(legend.position='none')

ggplotly(gg)              
```
:::

### 3.2.3 **Building an animated bubble plot: `plot_ly()` method**

::: {.codebox .code data-latex="code"}
In this sub-section, you will learn how to create an animated bubble plot by using¬†`plot_ly()`¬†method.
:::

::: panel-tabset
## The plot

```{r}
#| echo: false 
#| warning: false
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp    
```

## The code

```{r}
#| warning: false 
#| code-fold: show
#| eval: false
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp             
```
:::
